{% import "meta.j2" as meta with context %}

#pragma once
#include "meta.h"
#include "def_memory.h"

template<typename T>
struct destroy_at {
    static inline void impl(T *p) {
        std::destroy_at(p);
    }
};

{% macro _gen_memory(sig) %}
    NULL_SPEC()
    struct uninitialized_fill_n<NS_PREFIX() {{sig.name}} NO_SPEC()> {
        template<typename E>
        static inline void impl(NS_PREFIX() {{sig.name}}##_ptr NO_SPEC() const& p, size_t n, NS_PREFIX() {{sig.name}}##_expr<E> const& e) {
            {% for T, x in sig.fields %}
                uninitialized_fill_n<{{T}}>::impl(p.{{x}}##_ptr, n, e.{{x}}());
            {% endfor %}
        }
    };

    NULL_SPEC()
    struct uninitialized_copy_n<NS_PREFIX() {{sig.name}} NO_SPEC()> {
        static inline void impl(NS_PREFIX() {{sig.name}}##_const_ptr NO_SPEC() const& from, size_t n, NS_PREFIX() {{sig.name}}##_ptr NO_SPEC() const& to) {
            {% for T, x in sig.fields %}
                uninitialized_copy_n<{{T}}>::impl(from.{{x}}##_ptr, n, to.{{x}}##_ptr);
            {% endfor %}
        }
    };

    NULL_SPEC()
    struct uninitialized_move_n<NS_PREFIX() {{sig.name}} NO_SPEC()> {
        static inline void impl(NS_PREFIX() {{sig.name}}##_ptr NO_SPEC() const& from, size_t n, NS_PREFIX() {{sig.name}}##_ptr NO_SPEC() const& to) {
            {% for T, x in sig.fields %}
                uninitialized_move_n<{{T}}>::impl(from.{{x}}##_ptr, n, to.{{x}}##_ptr);
            {% endfor %}
        }
    };

    NULL_SPEC()
    struct destroy_n<NS_PREFIX() {{sig.name}} NO_SPEC()> {
        static inline void impl(NS_PREFIX() {{sig.name}}##_ptr NO_SPEC() const& p, size_t n) {
            {% for T, x in sig.fields %}
                destroy_n<{{T}}>::impl(p.{{x}}##_ptr, n);
            {% endfor %}
        }
    };

    NULL_SPEC()
    struct construct_at<NS_PREFIX() {{sig.name}} NO_SPEC()> {
        template<typename E>
        static inline void _impl_expr(NS_PREFIX() {{sig.name}}##_ptr NO_SPEC() const& p, NS_PREFIX() {{sig.name}}##_expr<E> const& e) {
            {% for T, x in sig.fields %}
                construct_at<{{T}}>::impl(p.{{x}}##_ptr, e.{{x}}());
            {% endfor %}
        }

        static inline void impl(NS_PREFIX() {{sig.name}}##_ptr NO_SPEC() const& p, NS_PREFIX() {{sig.name}} NO_SPEC() const& inst) {
            _impl_expr(p, inst);
        }

        template<typename E>
        static inline void impl(NS_PREFIX() {{sig.name}}##_ptr NO_SPEC() const& p, NS_PREFIX() {{sig.name}}##_expr<E> const& e) {
            _impl_expr(p, e);
        }

        template<typename... Args>
        static inline void impl(NS_PREFIX() {{sig.name}}##_ptr NO_SPEC() const& p, Args&&... args) {
            _impl_expr(p, NS_PREFIX() {{sig.name}} NO_SPEC() (std::forward<Args>(args)...));
        }
    };

    NULL_SPEC()
    struct destroy_at<NS_PREFIX() {{sig.name}} NO_SPEC()> {
        static inline void impl(NS_PREFIX() {{sig.name}}##_ptr NO_SPEC() const& p) {
            {% for T, x in sig.fields %}
                destroy_at<{{T}}>::impl(p.{{x}}##_ptr);
            {% endfor %}
        }
    };
{% endmacro %}

{{meta.macro_v("GEN_MEMORY", _gen_memory)}}
