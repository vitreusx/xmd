{% import "meta.j2" as meta with context %}

#pragma once
#include "meta.h"

template<typename T>
struct const_ref_impl {
    using type = T const&;
};

template<typename T>
using const_ref = typename const_ref_impl<T>::type;

{% macro _gen_const_ref(sig) %}
    NO_TEMPLATE()
    class {{sig.name}}##_const_ref: 
        public {{sig.name}}##_expr<{{sig.name}}##_const_ref NO_SPEC()> {
    public:
        {{sig.name}}##_const_ref(
            {% set comma = joiner(",") %}
            {% for T, x in sig.fields %}
                {{comma()}}const_ref<{{T}}> {{x}}
            {% endfor %}
        ):
            {% set comma = joiner(",") %}
            {% for T, x in sig.fields %}
                {{comma()}}{{x}}##_{{"{"}}{{x}}{{"}"}}
            {% endfor %}
        {};

        {{sig.name}}##_const_ref({{sig.name}} NO_SPEC() const& inst_):
            {% set comma = joiner(",") %}
            {% for T, x in sig.fields %}
                {{comma()}}{{x}}##_{{"{"}}inst_.{{x}}(){{"}"}}
            {% endfor %}
        {};

        {{sig.name}}##_const_ref({{sig.name}}##_ref NO_SPEC() const& ref_):
            {% set comma = joiner(",") %}
            {% for T, x in sig.fields %}
                {{comma()}}{{x}}##_{{"{"}}ref_.{{x}}(){{"}"}}
            {% endfor %}
        {};
        
        {% for T, x in sig.fields %}
            inline const_ref<{{T}}> {{x}}() const {
                return {{x}}##_;
            }
        {% endfor %}

    protected:
        {% for T, x in sig.fields %}
            const_ref<{{T}}> {{x}}##_;
        {% endfor %}
    };

    NULL_SPEC()
    struct const_ref_impl<{{sig.name}} NO_SPEC()> {
        using type = {{sig.name}}##_const_ref NO_SPEC();
    };
{% endmacro %}

{{meta.macro_v("GEN_CONST_REF", _gen_const_ref)}}