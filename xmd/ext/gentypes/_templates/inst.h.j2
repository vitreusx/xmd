{% import "meta.j2" as meta with context %}

#pragma once
#include "meta.h"
#include "def_memory.h"
#include <boost/serialization/access.hpp>

{% macro _inst_ctors(sig) %}
    {% set I = list(range(1, len(sig.fields)+1)) %}
    template<
        {% set comma = joiner(",") %}
        {% for idx in I %}
            {{comma()}} typename U{{idx}}
        {% endfor %}
    >
    inline {{sig.name}}(
        {% set comma = joiner(",") %}
        {% for idx, (T, x) in zip(I, sig.fields) %}
            {{comma()}}U{{idx}}&& x{{idx}}##_init
        {% endfor %}
    ):
        {% set comma = joiner(",") %}
        {% for idx, (T, x) in zip(I, sig.fields) %}
            {{comma()}}{{x}}##_{{"{"}}std::forward<U{{idx}}>(x{{idx}}##_init){{"}"}}
        {% endfor %}
    {};

        inline {{sig.name}}({{sig.name}} const& other):
            {% set comma = joiner(",") %}
            {% for T, x in sig.fields %}
                {{comma()}}{{x}}##_{{"{"}}other.{{x}}##_{{"}"}}
            {% endfor %}
        {};

        template<typename E>
        inline {{sig.name}}({{sig.name}}##_expr<E> const& e):
            {% set comma = joiner(",") %}
            {% for T, x in sig.fields %}
                {{comma()}}{{x}}##_{{"{"}}e.{{x}}(){{"}"}}
            {% endfor %}
        {};
{% endmacro %}

{{meta.macro_v_alt2("INST_CTORS", _inst_ctors)}}

{% macro _inst_assign_copy(sig) %}
    inline {{sig.name}}& operator=({{sig.name}} NO_SPEC() const& other) {
        {% for T, x in sig.fields %}
            {{x}}##_ = other.{{x}}##_;
        {% endfor %}
        return *this;
    }
{% endmacro %}

{{meta.macro_v_alt2("INST_ASSIGN_COPY", _inst_assign_copy)}}

{% macro _inst_assign_expr(sig) %}
    template<typename E>
    inline {{sig.name}}& operator=({{sig.name}}##_expr<E> const& e) {
        {% for T, x in sig.fields %}
            {{x}}##_ = e.{{x}}();
        {% endfor %}
        return *this;
    }
{% endmacro %}

{{meta.macro_v_alt2("INST_ASSIGN_EXPR", _inst_assign_expr)}}

{% macro _inst_lazy_fields(sig) %}
    {% for T, x in sig.fields %}
            inline const_ref<{{T}}> {{x}}() const {
                return {{x}}##_;
            }
            inline ref<{{T}}> {{x}}() {
                return {{x}}##_;
            }
        {% endfor %}
{% endmacro %}

{{meta.macro_v_alt2("INST_LAZY_FIELDS", _inst_lazy_fields)}}

{% macro _inst_fields(sig) %}
    {% for T, x in sig.fields %}
            {{T}} {{x}}##_;
        {% endfor %}
{% endmacro %}

{{meta.macro_v_alt2("INST_FIELDS", _inst_fields)}}

{% macro _inst_serialize(sig) %}
    friend class ::boost::serialization::access;

    template<class Archive>
    void serialize(Archive &ar, [[maybe_unused]] const unsigned int version) {
        {% for T, x in sig.fields %}
            ar & {{x}}##_;
        {% endfor %}
    }
{% endmacro %}

{{meta.macro_v_alt2("INST_SERIALIZE", _inst_serialize)}}

{% macro _inst_name(name) %}
    NO_TEMPLATE()
    class {{name}}: 
        public {{name}}##_expr<{{name}} NO_SPEC()>
{% endmacro %}

{{meta.macro_n("INST_NAME", _inst_name)}}

{% macro _inst_body() %}
    public:
        INST_CTORS()
        INST_ASSIGN_COPY()
        INST_ASSIGN_EXPR()
        INST_LAZY_FIELDS()
        
    protected:
        INST_FIELDS()

    private:
        INST_SERIALIZE()
{% endmacro %}

{{meta.macro_0("INST_BODY", _inst_body)}}

#define ENTER_BOOST_SERIALIZATION_NS() namespace boost::serialization {
#define LEAVE_BOOST_SERIALIZATION_NS() }

{% macro _inst_construct_data(sig) %}
    ENTER_BOOST_SERIALIZATION_NS()
    
    TEMPLATE(typename,Archive)
    void save_construct_data(Archive& ar, NS_PREFIX() {{sig.name}} NO_SPEC() const *inst, const unsigned int version) {
        {% for T, x in sig.fields %}
            {{T}} {{x}}##_inst = inst->{{x}}();
            save_construct_data(ar, &{{x}}##_inst, version);
        {% endfor %}
    }

    TEMPLATE(typename,Archive)
    void load_construct_data(Archive& ar, NS_PREFIX() {{sig.name}} NO_SPEC() *inst, [[maybe_unused]] const unsigned int version) {
        {% for T, x in reversed(sig.fields) %}
            alignas(alignof({{T}})) unsigned char {{x}}##_buf[sizeof({{T}})];
            {{T}}& {{x}}##_ref = *reinterpret_cast<{{T}}*>(&{{x}}##_buf[0]);
            ar >> {{x}}##_ref;
        {% endfor %}

        ::new (static_cast<void*>(inst)) NS_PREFIX() {{sig.name}} NO_SPEC()(
            {% set comma = joiner(",") %}
            {% for T, x in sig.fields %}
                {{comma()}}{{x}}##_ref
            {% endfor %});
    }
    
    LEAVE_BOOST_SERIALIZATION_NS()
{% endmacro %}

{{meta.macro_v_alt2("INST_CONSTRUCT_DATA", _inst_construct_data)}}

{% macro _gen_inst() %}
    ENTER_NS()
    INST_NAME() {
        INST_BODY()
    };
    LEAVE_NS()
    INST_CONSTRUCT_DATA()
{% endmacro %}

{{meta.macro_0("GEN_INST", _gen_inst)}}