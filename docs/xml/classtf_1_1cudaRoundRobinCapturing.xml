<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classtf_1_1cudaRoundRobinCapturing" kind="class" language="C++" prot="public">
    <compoundname>tf::cudaRoundRobinCapturing</compoundname>
    <basecompoundref prot="public" virt="non-virtual">tf::cudaCapturingBase</basecompoundref>
    <includes refid="cuda__optimizer_8hpp" local="no">cuda_optimizer.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classtf_1_1cudaRoundRobinCapturing_1a672b45d300c57d726c203c62f950efbd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class cudaFlowCapturer</definition>
        <argsstring></argsstring>
        <name>cudaFlowCapturer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_optimizer.hpp" line="261" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_optimizer.hpp" bodystart="261" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtf_1_1cudaRoundRobinCapturing_1a832bdceaa3811bab2c4a5358429dd0b0" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t tf::cudaRoundRobinCapturing::_num_streams</definition>
        <argsstring></argsstring>
        <name>_num_streams</name>
        <initializer>{4}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_optimizer.hpp" line="287" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_optimizer.hpp" bodystart="287" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtf_1_1cudaRoundRobinCapturing_1acd70e9ffbc52b95a0cc79af740ce7827" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tf::cudaRoundRobinCapturing::cudaRoundRobinCapturing</definition>
        <argsstring>()=default</argsstring>
        <name>cudaRoundRobinCapturing</name>
        <briefdescription>
<para>constructs a round-robin optimizer with 4 streams by default </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_optimizer.hpp" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaRoundRobinCapturing_1acbfa700f7cc23203baf6a52a5a63957e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::cudaRoundRobinCapturing::cudaRoundRobinCapturing</definition>
        <argsstring>(size_t num_streams)</argsstring>
        <name>cudaRoundRobinCapturing</name>
        <param>
          <type>size_t</type>
          <declname>num_streams</declname>
        </param>
        <briefdescription>
<para>constructs a round-robin optimizer with the given number of streams </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_optimizer.hpp" line="273" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_optimizer.hpp" bodystart="296" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaRoundRobinCapturing_1a246cb7f161747a4234018658ee88d40d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::cudaRoundRobinCapturing::num_streams</definition>
        <argsstring>() const</argsstring>
        <name>num_streams</name>
        <briefdescription>
<para>queries the number of streams used by the optimizer </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_optimizer.hpp" line="278" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_optimizer.hpp" bodystart="305" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaRoundRobinCapturing_1a884e12f48caa39722448accaaa0b167a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::cudaRoundRobinCapturing::num_streams</definition>
        <argsstring>(size_t n)</argsstring>
        <name>num_streams</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>sets the number of streams used by the optimizer </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_optimizer.hpp" line="283" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_optimizer.hpp" bodystart="310" bodyend="315"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtf_1_1cudaRoundRobinCapturing_1aff877b2b34a769c86ab03c8e1fc6253f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>cudaGraph_t</type>
        <definition>cudaGraph_t tf::cudaRoundRobinCapturing::_optimize</definition>
        <argsstring>(cudaGraph &amp;graph)</argsstring>
        <name>_optimize</name>
        <param>
          <type>cudaGraph &amp;</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_optimizer.hpp" line="289" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_optimizer.hpp" bodystart="334" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaRoundRobinCapturing_1aadc3f6faabee4a59b5cab818123e7165" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::cudaRoundRobinCapturing::_reset</definition>
        <argsstring>(std::vector&lt; std::vector&lt; cudaNode *&gt;&gt; &amp;graph)</argsstring>
        <name>_reset</name>
        <param>
          <type><ref refid="cpp/container/vector" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/container/vector" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; cudaNode *&gt;&gt; &amp;</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_optimizer.hpp" line="291" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_optimizer.hpp" bodystart="317" bodyend="331"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>class to capture a CUDA graph using a round-robin algorithm </para>    </briefdescription>
    <detaileddescription>
<para>A round-robin capturing algorithm levelizes the user-described graph and assign streams to nodes in a round-robin order level by level. The algorithm is based on the following paper published in Euro-Par 2021:<itemizedlist>
<listitem><para>Dian-Lun Lin and Tsung-Wei Huang, "Efficient GPU Computation using Task Graph Parallelism," <emphasis>European Conference on Parallel and Distributed Computing (Euro-Par)</emphasis>, 2021</para></listitem></itemizedlist>
</para><para>The round-robin optimization algorithm is best suited for large cudaFlow graphs that compose hundreds of or thousands of GPU operations (e.g., kernels and memory copies) with many of them being able to run in parallel. You can configure the number of streams to the optimizer to adjust the maximum kernel currency in the captured CUDA graph. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="39">
        <label>tf::cudaRoundRobinCapturing</label>
        <link refid="classtf_1_1cudaRoundRobinCapturing"/>
        <childnode refid="40" relation="public-inheritance">
        </childnode>
      </node>
      <node id="40">
        <label>tf::cudaCapturingBase</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="41">
        <label>tf::cudaRoundRobinCapturing</label>
        <link refid="classtf_1_1cudaRoundRobinCapturing"/>
        <childnode refid="42" relation="public-inheritance">
        </childnode>
      </node>
      <node id="42">
        <label>tf::cudaCapturingBase</label>
      </node>
    </collaborationgraph>
    <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_optimizer.hpp" line="259" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_optimizer.hpp" bodystart="259" bodyend="293"/>
    <listofallmembers>
      <member refid="classtf_1_1cudaCapturingBase_1aa33d24eb535b83f0719c3f9770328a37" prot="protected" virt="non-virtual"><scope>tf::cudaRoundRobinCapturing</scope><name>_levelize</name></member>
      <member refid="classtf_1_1cudaRoundRobinCapturing_1a832bdceaa3811bab2c4a5358429dd0b0" prot="private" virt="non-virtual"><scope>tf::cudaRoundRobinCapturing</scope><name>_num_streams</name></member>
      <member refid="classtf_1_1cudaRoundRobinCapturing_1aff877b2b34a769c86ab03c8e1fc6253f" prot="private" virt="non-virtual"><scope>tf::cudaRoundRobinCapturing</scope><name>_optimize</name></member>
      <member refid="classtf_1_1cudaRoundRobinCapturing_1aadc3f6faabee4a59b5cab818123e7165" prot="private" virt="non-virtual"><scope>tf::cudaRoundRobinCapturing</scope><name>_reset</name></member>
      <member refid="classtf_1_1cudaCapturingBase_1ab970a4a344cca5be7e479e09f2599194" prot="protected" virt="non-virtual"><scope>tf::cudaRoundRobinCapturing</scope><name>_toposort</name></member>
      <member refid="classtf_1_1cudaRoundRobinCapturing_1a672b45d300c57d726c203c62f950efbd" prot="private" virt="non-virtual"><scope>tf::cudaRoundRobinCapturing</scope><name>cudaFlowCapturer</name></member>
      <member refid="classtf_1_1cudaRoundRobinCapturing_1acd70e9ffbc52b95a0cc79af740ce7827" prot="public" virt="non-virtual"><scope>tf::cudaRoundRobinCapturing</scope><name>cudaRoundRobinCapturing</name></member>
      <member refid="classtf_1_1cudaRoundRobinCapturing_1acbfa700f7cc23203baf6a52a5a63957e" prot="public" virt="non-virtual"><scope>tf::cudaRoundRobinCapturing</scope><name>cudaRoundRobinCapturing</name></member>
      <member refid="classtf_1_1cudaRoundRobinCapturing_1a246cb7f161747a4234018658ee88d40d" prot="public" virt="non-virtual"><scope>tf::cudaRoundRobinCapturing</scope><name>num_streams</name></member>
      <member refid="classtf_1_1cudaRoundRobinCapturing_1a884e12f48caa39722448accaaa0b167a" prot="public" virt="non-virtual"><scope>tf::cudaRoundRobinCapturing</scope><name>num_streams</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
